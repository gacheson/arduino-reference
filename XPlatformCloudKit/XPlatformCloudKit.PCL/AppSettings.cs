/*
* LICENSE: https://raw.github.com/apimash/StarterKits/master/LicenseTerms-SampleApps%20.txt
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using XPlatformCloudKit.DataServices;
using XPlatformCloudKit.Models;
using System.Runtime.Serialization;

namespace XPlatformCloudKit
{
    /// <summary>
    /// Public singleton class for storing application-wide settings
    /// </summary>
    [DataContract]
    public static class AppSettings
    {
        #region Global Options
        //The name of your applicaion, this value appears at the top of your app
        public static string ApplicationName = "My Application";

        //Timeframe in minutes to store data before making new request to Data Source
        //set to negative value to disable caching
        public static int CacheIntervalInMinutes = 60;
        #endregion

        #region AzureMobileService Settings
        public static bool EnableAzureMobileService = true;  //Use Mobile Service located @ MobileServiceAddress with Key set to MobileServiceApplicationKey

        //Mark true to create the Initial Schema if you are running for the first time against a brand new Mobile Service
        //Be sure you have created a table named "Item" and have permission to update with app key
        //After running once, set back to false
        public static bool CreateInitialSchemaForAzureMobileService = false;

        //Your Azure Mobile Service Address 
        //i.e. https://xplatformcloudkit.azure-mobile.net/
        public static string MobileServiceAddress = "https://xplatformcloudkit.azure-mobile.net/";

        //You Azure Mobile Service Key 
        //i.e. UYZnUrrabofKBELSRdRsmCGboyDGMJ15
        public static string MobileServiceApplicationKey = "UYZnUrrabofKBELSRdRsmCGboyDGMJ15";

        #endregion

        #region RssService Settings
        public static bool EnableRssService = true;//Use RssAddressCollection 
        public static int RssMaxItemsPerFeed = -1; //The Maximum number of items to fetch for each feed. Enter Negative value to fetch all.
        public static bool RssOrderDescending = false; // The order items in the feed should be rendered on screen. News is usually descending (newest first), strategy guides are usually ascending (viewed in order).

        //Urls to an RSS Data Source 
        //i.e. http://reddit.com/r/technology/.rss
        // NOTE: Make sure that the Group value you use is longer than 1 character or a name will be autogenerated from the RSS data.
        public static UrlSource[] RssAddressCollection = 
        {
            //new UrlSource{Url = "http://reddit.com/r/Microsoft/.rss", Group = "Reddit example"},
            //new UrlSource{Url = "http://api.flickr.com/services/feeds/photos_public.gne?format=rss&tags=cats", Group = "Flickr Example"},
            //new UrlSource{Url = "https://www.facebook.com/feeds/page.php?format=rss20&id=487598667939827", Group = "Facebook Example"},
            //new UrlSource{Url = "http://pipes.yahoo.com/pipes/pipe.run?_id=74fc14a798efee89310bea2b56f99336&_render=rss&n=10", Group = "Yahoo Pipes example"},
            //new UrlSource{Url = "http://www.amazon.com/rss/tag/xbox/new/", Group = "Amazon example"},
            //new UrlSource{Url = "http://www.bing.com/search?q=tesla&format=rss", Group = "Bing example"},
            //new UrlSource{Url = "http://changelogshow.com/105.rss", Group = "Podcast example"},
            //new UrlSource{Url = "http://blog.designersofthings.com/rss", Group = "Tumblr Example"},
            //new UrlSource{Url = "http://pinterest.com/happylynnifer/feed.rss", Group = "Pinterest User Example"},
            //new UrlSource{Url = "http://www.pinterest.com/happylynnifer/human-tech-advances.rss", Group = "Pinterest User Board Example"},

            //NOTE: Youtube public RSS APIs *may* work but are not guaranteed longterm, offical deprecation announced on March 4, 2014
            //More info @ https://developers.google.com/youtube/2.0/developers_guide_protocol_deprecated
            //Highly suggested to use 
            new UrlSource{Url = "http://gdata.youtube.com/feeds/api/playlists/PL976D5FEB096858B1?alt=rss&max-results=50&start-index=1", Group = "Youtube Playlist Example"},
            //new UrlSource{Url = "http://gdata.youtube.com/feeds/base/videos?alt=rss&q=xbox%20one", Group = "Youtube query example"},
            //new UrlSource{Url = "http://gdata.youtube.com/feeds/base/videos?alt=rss&author=thewindotnet", Group = "Youtube author example"},

        };

        #endregion

        #region LocalItemsFileService Settings
        public static bool EnableLocalItemsFileService = true; //Use Items contained in LocalItemsFile.xml
        //This allows users to host a remote XML file for their items. You can use http://ualr.edu/adcrow/XPCKItemFiles/TestItemsFile.xml as a test.
        public static string RemoteItemFileService = "";
        #endregion

        #region Windows8X Project options
        //Items whose Group Name is contained in the following Dictionary will display their Description field in full screen
        //When an item of this group is selected, it will not show it's Title, Subtitle, or Image. (Ideal for Youtube RSS feeds)
        //Applies to Windows 8.0 app only
        public static readonly string[] GroupsToDisplayInFullScreenWindows8 = 
        {
            "Youtube Playlist Example","Youtube query example"
        };

        //Determines whether to use the Light theme (white background / black text) over the default Dark theme
        //(black background / white text)
        public static bool UseLightThemeForWindows8X = true;
        //To change specifics value of the chosen theme, i.e. Font Color throughout the Windows 8.0 application
        //Open XPlatformCloudKit.Win8/Common/StandardStyles.xaml and look for the <!-- Theme Overrides --> Section
        //Uncomment the portion(s) of the theme you wish to override

        //Determines whether a background image should be used in the Windows 8 app.
        //Set to false to use standard theme. Set to true to use wallpaper. To change the wall paper, replace Wallpaper.png in the Assets folder.
        public static bool EnableBackgroundWin8X = false;

        //Url to your privacy policy
        //The Windows Store now requires that your privacy policy be specific to your app as of April 7, 2014 
        //I.e. they are no longer allowing generic privacy policies
        //You must be clearly include the name of the app in your privacy policy to meet this requirement!
        //
        //In the Description Step of App Submission in the Windows 8 store you may modify and use the value below
        //to generate an app-specific privacy policy
        //"http://pjdecarlo.com/2013/11/app-privacy-policy.html?App=INSERT YOUR APP NAME HERE"
        //OR you may provide your own app-specific privacy policy url
        //
        //In addtion your app must display a link to your privacy policy in the charms bar, the value below is used to create that link
        //OR you may provide your own app-specific privacy policy url
        public static string PrivacyPolicyUrl = "http://pjdecarlo.com/2013/11/app-privacy-policy.html" + "?App=" + ApplicationName;
        #endregion

        #region Windows Phone 8X Project options      
        //Set to true if you wish to employ a trial experience when submitting your app to the marketplace
        public static bool TrialModeEnabled = false;
        //Use to test app behavior as though Trial Mode has been enabled in the marketplace, SET TO FALSE BEFORE SUBMITTING TO MARKETPLACE
        public static bool SimulateTrialMode = false;
        //The amount of days to run the app unrestriced if Trial Mode is enforced, Set to negative value to simulate expiration
        public static int TrialPeriodInDays = 7;

        //Determines whether a background image should be used in the Windows Phone 8 app.
        //Set to false to use standard theme. Set to true to use wallpaper. To change the wall paper, replace Wallpaper.png in the Assets folder.
        public static bool EnablePhoneBackground8X = false;

        //Enables logic for discovery of phone numbers present in Item.Description on the ItemDescriptionView
        //Creates a button for all discovered numbers that when clicked, initiates a phone call (Only works on physical device)
        //Examples of matching formats: (123) 123-1234 ; 800-555-1212
        public static bool EnableParsingPhoneNumbersPhone8X = true;

        //When true, uses ListView to display Items in Jumplist in ItemsDescriptionView
        //When false, uses HubView to display Items in side-ways Panorama
        //Windows Phone 8.1 Only
        public static bool EnableSingleVerticalLayoutPhone81 = false;

        #endregion

        #region Advanced ItemDescriptionView / Webview Options for Windows 8.X and Windows Phone 8.X projects
        //Determines background color of WebView Control used behind Description in ItemDescriptionView.xaml.cs
        //Set to "Auto" to determine based on theme background or override using hex color string i.e. "#FFFFFF" for white, "#000000" for black
        public static string BackgroundColorOfDescription = "Auto";

        //Determines Font color of WebView Control used to display Description in ItemDescriptionView.xaml.cs
        //Set to "Auto" to determine based on theme background or override using hex color string i.e. "#FFFFFF" for white, "#000000" for black
        public static string FontColorOfDescription = "Auto";


        //Determines whether hyperlinks can be clicked in ItemDescriptionView.xaml for both Windows 8 and Windows Phone 8 projects
        //Sometimes, store may fail apps which contain hyperlinks that navigate improperly when clicked, this disables them
        public static bool DisableHyperLinksInItemDescriptionView = false;

        //Determines whether hyperlinks with target="_blank" are rewritten to target="_self"
        //When enabled, hyperlinks will not open in a new tab
        public static bool DisableOpeningHyperLinksInNewTab = true;
        #endregion

        #region App Promo Options for Windows 8X and Windows Phone 8X projects
        //App Promo is a control created by Jared Bienz which provides a rating reminder to users based on user defined settings
        //http://code.msdn.microsoft.com/wpapps/Improve-app-ratings-with-a-6139caa5
        public static bool EnableAppPromoRatingReminder = true;
        
        //The number of application runs before the reminder will be displayed. The default is 7.
        public static int NumberOfRunsBeforeRateReminder = 7;

        #endregion

        #region Advertising Control Options for Windows 8.0 and Windows Phone 8.0 projects
        //Allow displaying of Ads from Microsoft Pubcenter in Windows Phone 8 Project
        //http://msdn.microsoft.com/en-us/library/advertising-mobile-windows-phone-sdk(v=msads.20).aspx
        public static bool EnablePubcenterAdsPhone8 = false;
        //Should Ads be hidden if the app has been purchased  (true) or always shown (false) 
        public static bool HideAdsIfPurchasedPhone8 = false;
        //Application and AdUnit Ids provided from Pubcenter
        //See: http://msdn.microsoft.com/en-us/library/advertising-mobile-windows-phone-sdk-start(v=msads.20).aspx
        //for information on configuring and providing your own ads
        //Supports 480x80 ads only!  Make sure your add unit matches this size when creating in Pubcenter!
        public static string PubcenterApplicationIdPhone8 = "test_client";
        public static string PubcenterAdUnitIdPhone8 = "Image480_80";

        //Allow displaying of Ads from Microsoft Pubcenter in Windows 8 Project
        //http://msdn.microsoft.com/en-us/library/advertising-windows-sdk(v=msads.10).aspx
        public static bool EnablePubcenterAdsWin8 = false;
        //Should Ads be hidden if the app has been purchased  (true) or always shown (false) 
        public static bool HideAdsIfPurchasedWin8 = false;
        //Application and AdUnit Ids provided from Pubcenter
        //See: http://msdn.microsoft.com/en-us/library/advertising-windows-pubcenter(v=msads.10).asp
        //for information on configuring and providing your own ads
        //Supports 728x90 by default!  Make sure your ad unit matches this size when creating in Pubcenter!
        //To change the render size for different ad sizes see lines 133 & 134 of XPlatformCloudKit.Win8/Views/ItemsShowcaseView.xaml.cs
        //Be careful your ad does not block your Application Title!  
        public static string PubcenterApplicationIdWin8 = "d25517cb-12d4-4699-8bdc-52040c712cab";
        public static string PubcenterAdUnitIdWin8 = "10042999";
        #endregion

        #region 3rd Party Services
        //Subject to changes outlined by the API host - not guaranteed to work forever!
        #region YoutubeService
        public static bool EnableYoutubeService = false;

        //Created @ https://code.google.com/apis/console, enable YouTube Data API v3 under APIs then find under Credentials
        //NOT USED YET - Placeholder for later
        //public string YoutubeClientId = "";
        //public string YoutubeClientSecret = "";

        //Created @ https://code.google.com/apis/console, enable YouTube Data API v3 under APIs then click Credentials
        //Under Public API Access - click "Create New Key"
        public static string YoutubePublicAPIKey = "";

        public static UrlSource[] YoutubeAddressCollection = 
        {
             new UrlSource {Url = "https://www.googleapis.com/youtube/v3/playlistItems?playlistId=PL0OTHVsGLN2medBm9k-VFtB6cvUbP9n6B&part=snippet&maxResults=50&fields=items%2CnextPageToken&key=" + YoutubePublicAPIKey, Group = "Youtube Playlist"}
        };

        #region Youtube Video Link Options

        //Forces Youtube links to be rewritten so that they load the video only in full screen
        //This produces a very clean look as the related videos etc. are not visible
        public static bool ForceYoutubeVideosToLoadFullScreen = true;
        
        //Maximizes screen real-estate used by Youtube Videos in ItemDescriptionView
        public static bool MaximizeYoutubeVideos = true;
        #endregion

        #endregion

        #region TwitterService
        public static bool EnableTwitterService = false;

        //Created @ https://apps.twitter.com, found under "manage api keys"
        public static string TwitterConsumerKey = "";
        public static string TwitterConsumerSecret = "";

        //In "manage api keys" scroll down to create access tokens
        public static string TwitterAccessToken = "";
        public static string TwitterAccessSecret = "";

        public static UrlSource[] TwitterAddressCollection = 
        {
             new UrlSource {Url = "https://api.twitter.com/1.1/statuses/user_timeline.json?user_id=pjdecarlo", Group = "PJDeCarlo"}
        };
        #endregion

        #endregion

        #region RemoteUrlSourceService Settings
        public static bool EnableRemoteUrlSourceService = false;
        /*
         *  Put the URL to a file located on a web server you control that will contain a list of additional
         *  UrlSources you wish to use in your application.  This allows for dynamic update of content without
         *  submitting an official app update. The file should be a simple CSV file containing three fields per 
         *  line, with the fields separated by a comma. It is very important to follow the structure below.
         *  The first field should be a valid RSS URL, the second field should be the group name
         *  you want the feed assigned to, and the third field should designate the DataService Type.
         *  Valid values for DataService Type are "RssService", "YoutubeService", and "TwitterService"
         *  You may extend to support your own IDataService by modifying the switch in RemoteUrlSourceService.cs
         *
         * Here's an example of a sample remote RSS feed file with two RSS feeds, and a single common group.
         * 
         *  http://reddit.com/r/micrsoft/.rss, "Remote RSS Feed Example", "RssService"
         *  http://gdata.youtube.com/feeds/base/videos?alt=rss&q=xbox%20one, "Remote RSS Feed Example", "RssService"
         *
         * Make sure EnableRemoteUrlSourceService is set to TRUE or the remote content (or the RSS feeds below) will 
         * not be accessed.
         */
        //The value below can be used to test RemoteUrlSourceUrl, but please don't leave it active in your published app.
        //public string RemoteUrlSourceUrl = "http://pjdecarlo.com/playground/remoteUrlSourceExample.html";
        public static string RemoteUrlSourceUrl = "";
        #endregion

        #region RemoteAppSettings
        //Allows for using a remote AppSettings file - meaning any setting, changes, or additions can be retrieved remotely
        //To use: First make your baked in modificiations to AppSettings.cs as normal
        //Next, run the included AppSettingsSerializer project and host the result of AppSettings.json on a remote server
        //Set EnableRemoteAppSettings to true
        //Point to the remote Url which contains your AppSetting.json output in RemoteAppSettingsService
        
        public static bool EnableRemoteAppSettings = false;

        //public static string RemoteAppSettingsService = "http://pjdecarlo.com/playground/XPCKSampleRemoteAppSettings/AppSettings.html";
        public static string RemoteAppSettingsService = "";
        #endregion
    }
}
